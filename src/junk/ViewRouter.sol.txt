import "src/Kernel.sol";

abstract contract ViewConsumer{
    constructor (address ViewRouter) {

    }
    Keycode public constant PARAM = 0x504152414d;

    function viewModule(Keycode keycode_, uint256 data_) external view virtual returns (bytes32 value){
        
    }

    function viewParam(bytes32 name_) external view virtual returns (bytes32 value){
        ViewRouter.staticCall(abi.encodePacked(PARAM, name_));
    } 


}

contract ViewRouter is Policy {
    constructor(Kernel _kernel) Policy(_kernel) {}

    function configureDependencies()
        external
        pure
        override
        returns (Keycode[] memory dependencies)
    {
        return new Keycode[](0);
    }

    function requestPermissions()
        external
        pure
        override
        returns (Permissions[] memory requests)
    {
        return new Permissions[](0);
    }

    

    

    fallback() external {
        Keycode keycode_;
        bytes memory calldata_;
        assembly{
            keycode_ := shr(216, calldataload(0))
            calldata_ := shl(32, calldataload(0))
        }
        address moduleAddress = getModuleAddress(keycode_);
        (bool success, bytes memory result)=moduleAddress.staticcall(calldata_);
        if(success){
            assembly{
                mstore(0, result)
                return(0, 32)
            }
        }
        else {
            assembly{
                revert(add(result, 32), mload(result))
            }
        }
        
    }
}
